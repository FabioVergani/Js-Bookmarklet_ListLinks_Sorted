	console.clear();
	(w=>{
		const d=w.document;
		let m=d.links;
		if(m.length){
			let e,loc=[];
			//
			const n=w.location.pathname,O=w.Object,C=O.create,
			ext=C(null),
			dupe=C(null,{'add':{value:function(p){const o=this;if(p in o){++o[p]}else{o[p]=2}},enumerable:false}}),
			desc={'tot':{value:1,writable:true,enumerable:false}},
			exp=/\w+\.\w+$/;
			//
			for(const e of m){
				const s=e.href;
				if(s.length){
					const o=ext,i=e.pathname;
					if(i!==n){
						let p=e.hostname,x=exp;
						if(x.test(p)){
							p=p.match(x)[0]
						};
						if(p in o){
							p=x=o[p];if(i in x){x=x[i];if(x.indexOf(s)===-1){x[x.length]=s}else{dupe.add(s)}}else{x[i]=[s];++p.tot}
						}else{
							(o[p]=C(null,desc))[i]=[s]
						}
					}else{//Ã¨ locale
						const x=loc;
						if(x.indexOf(s)===-1){const s=e.hash;if(s.length){x[x.length]=s}}
					}
				}
			};
			//
			m=[];
			for(const i in ext){const o=ext[i],x=m[m.length]=[i,o];for(const p in o){o[p].sort()}};
			if(m.length){
				m.sort((a,b)=>b[1].tot-a[1].tot);
				//
				m=m.map(x=>{
					const o=x[1];
					let r=['<b>',x[0],'</b>\n'],q='',j=0;
					for(const p in o){
						r[r.length]=q.length && p.indexOf(q)!==0?'\n\n':'\n';//!startsWith,divider...
						r=r.concat(o[p]);
						q=p.substring(0,p.lastIndexOf('/')-1)
					};
					return r
				});
				//
				let s=['<pre>'];
				while(e=m.shift()){
					s.push('<div>');
					s=s.concat(e);
					s.push('</div>\n');
				};
				s[s.length]='</pre>';
				w.open().document.write(s.join(''));


				console.info('ext:%O',ext);
				loc.sort();
				console.info('loc:%O',loc);
				console.info('dup:%O',dupe);

			};


		};
	})(window);
